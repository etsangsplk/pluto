// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package imap is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	Context
	Confirmation
	Command
	Reply
	Await
	MailFile
	Abort
*/
package imap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Context struct {
	ClientID   string `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	RespWorker string `protobuf:"bytes,3,opt,name=respWorker" json:"respWorker,omitempty"`
}

func (m *Context) Reset()                    { *m = Context{} }
func (m *Context) String() string            { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Context) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *Context) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Context) GetRespWorker() string {
	if m != nil {
		return m.RespWorker
	}
	return ""
}

type Confirmation struct {
	Status uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *Confirmation) Reset()                    { *m = Confirmation{} }
func (m *Confirmation) String() string            { return proto.CompactTextString(m) }
func (*Confirmation) ProtoMessage()               {}
func (*Confirmation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Confirmation) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Command struct {
	Text     string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	ClientID string `protobuf:"bytes,2,opt,name=clientID" json:"clientID,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Command) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Command) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type Reply struct {
	Text   string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Reply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Reply) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Await struct {
	Text     string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Status   uint32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	NumBytes uint32 `protobuf:"varint,3,opt,name=numBytes" json:"numBytes,omitempty"`
}

func (m *Await) Reset()                    { *m = Await{} }
func (m *Await) String() string            { return proto.CompactTextString(m) }
func (*Await) ProtoMessage()               {}
func (*Await) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Await) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Await) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Await) GetNumBytes() uint32 {
	if m != nil {
		return m.NumBytes
	}
	return 0
}

type MailFile struct {
	Content  []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ClientID string `protobuf:"bytes,2,opt,name=clientID" json:"clientID,omitempty"`
}

func (m *MailFile) Reset()                    { *m = MailFile{} }
func (m *MailFile) String() string            { return proto.CompactTextString(m) }
func (*MailFile) ProtoMessage()               {}
func (*MailFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MailFile) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *MailFile) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type Abort struct {
	ClientID string `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
}

func (m *Abort) Reset()                    { *m = Abort{} }
func (m *Abort) String() string            { return proto.CompactTextString(m) }
func (*Abort) ProtoMessage()               {}
func (*Abort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Abort) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func init() {
	proto.RegisterType((*Context)(nil), "imap.Context")
	proto.RegisterType((*Confirmation)(nil), "imap.Confirmation")
	proto.RegisterType((*Command)(nil), "imap.Command")
	proto.RegisterType((*Reply)(nil), "imap.Reply")
	proto.RegisterType((*Await)(nil), "imap.Await")
	proto.RegisterType((*MailFile)(nil), "imap.MailFile")
	proto.RegisterType((*Abort)(nil), "imap.Abort")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Prepare(ctx context.Context, in *Context, opts ...grpc.CallOption) (*Confirmation, error)
	Close(ctx context.Context, in *Context, opts ...grpc.CallOption) (*Confirmation, error)
	Select(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	Create(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	Delete(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	List(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	AppendBegin(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Await, error)
	AppendEnd(ctx context.Context, in *MailFile, opts ...grpc.CallOption) (*Reply, error)
	AppendAbort(ctx context.Context, in *Abort, opts ...grpc.CallOption) (*Confirmation, error)
	Expunge(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	Store(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Prepare(ctx context.Context, in *Context, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/imap.Node/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Close(ctx context.Context, in *Context, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/imap.Node/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Select(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/Select", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Create(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Delete(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) List(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AppendBegin(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Await, error) {
	out := new(Await)
	err := grpc.Invoke(ctx, "/imap.Node/AppendBegin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AppendEnd(ctx context.Context, in *MailFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/AppendEnd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AppendAbort(ctx context.Context, in *Abort, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/imap.Node/AppendAbort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Expunge(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/Expunge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Store(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/imap.Node/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Prepare(context.Context, *Context) (*Confirmation, error)
	Close(context.Context, *Context) (*Confirmation, error)
	Select(context.Context, *Command) (*Reply, error)
	Create(context.Context, *Command) (*Reply, error)
	Delete(context.Context, *Command) (*Reply, error)
	List(context.Context, *Command) (*Reply, error)
	AppendBegin(context.Context, *Command) (*Await, error)
	AppendEnd(context.Context, *MailFile) (*Reply, error)
	AppendAbort(context.Context, *Abort) (*Confirmation, error)
	Expunge(context.Context, *Command) (*Reply, error)
	Store(context.Context, *Command) (*Reply, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Context)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Prepare(ctx, req.(*Context))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Context)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Close(ctx, req.(*Context))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Select(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Create(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Delete(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).List(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AppendBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AppendBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/AppendBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AppendBegin(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AppendEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AppendEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/AppendEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AppendEnd(ctx, req.(*MailFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AppendAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Abort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AppendAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/AppendAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AppendAbort(ctx, req.(*Abort))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Expunge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Expunge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Expunge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Expunge(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imap.Node/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Store(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imap.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Node_Prepare_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Node_Close_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _Node_Select_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Node_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Node_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Node_List_Handler,
		},
		{
			MethodName: "AppendBegin",
			Handler:    _Node_AppendBegin_Handler,
		},
		{
			MethodName: "AppendEnd",
			Handler:    _Node_AppendEnd_Handler,
		},
		{
			MethodName: "AppendAbort",
			Handler:    _Node_AppendAbort_Handler,
		},
		{
			MethodName: "Expunge",
			Handler:    _Node_Expunge_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Node_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6f, 0xda, 0x40,
	0x10, 0xc5, 0xf9, 0x63, 0x63, 0x18, 0xa0, 0x87, 0x3d, 0x54, 0x16, 0x87, 0xaa, 0x72, 0x5b, 0x5a,
	0xb5, 0x95, 0x55, 0x95, 0x53, 0x6f, 0x05, 0x43, 0xa4, 0x48, 0x09, 0x89, 0xcc, 0x21, 0xe7, 0x05,
	0x4f, 0xd0, 0x2a, 0xf6, 0xee, 0x6a, 0xbd, 0x56, 0xe0, 0xc3, 0xe6, 0xbb, 0x44, 0xb6, 0xb1, 0x09,
	0x49, 0xc0, 0xc9, 0xf1, 0x79, 0x7e, 0x3b, 0xf3, 0x66, 0x9e, 0x0c, 0xc0, 0x45, 0x80, 0xae, 0x54,
	0x42, 0x0b, 0x62, 0xb0, 0x88, 0x4a, 0x87, 0x82, 0xe5, 0x09, 0xae, 0x71, 0xa3, 0xc9, 0x00, 0xda,
	0xab, 0x90, 0x21, 0xd7, 0xe7, 0x53, 0xbb, 0xfe, 0xb9, 0xfe, 0xa3, 0xe3, 0x97, 0x3a, 0xad, 0x25,
	0x31, 0xaa, 0x39, 0x8d, 0xd0, 0x6e, 0xe4, 0xb5, 0x42, 0x93, 0x4f, 0x00, 0x0a, 0x63, 0x79, 0x23,
	0xd4, 0x1d, 0x2a, 0xbb, 0x99, 0x55, 0x9f, 0x7c, 0x71, 0x86, 0xd0, 0xf3, 0x04, 0xbf, 0x65, 0x2a,
	0xa2, 0x9a, 0x09, 0x4e, 0x3e, 0x42, 0x2b, 0xd6, 0x54, 0x27, 0x71, 0x36, 0xa5, 0xef, 0xef, 0x94,
	0xf3, 0x2f, 0xb5, 0x12, 0x45, 0x94, 0x07, 0x84, 0x80, 0x91, 0x5a, 0xda, 0xd9, 0x30, 0x5e, 0xd8,
	0x6b, 0x1c, 0xda, 0x73, 0x46, 0x60, 0xfa, 0x28, 0xc3, 0xed, 0xab, 0x0f, 0xf7, 0xf3, 0x1a, 0x07,
	0xf3, 0xae, 0xc0, 0x1c, 0xdf, 0x53, 0xa6, 0xdf, 0xf3, 0x28, 0x75, 0xc1, 0x93, 0x68, 0xb2, 0xd5,
	0x18, 0x67, 0xab, 0xf6, 0xfd, 0x52, 0x3b, 0xff, 0xa1, 0x7d, 0x49, 0x59, 0x78, 0xc6, 0x42, 0x24,
	0x36, 0x58, 0xab, 0xf4, 0xae, 0x3c, 0x6f, 0xdb, 0xf3, 0x0b, 0x79, 0x72, 0x8f, 0x2f, 0x60, 0x8e,
	0x97, 0x42, 0x9d, 0xcc, 0xe2, 0xef, 0x43, 0x13, 0x8c, 0xb9, 0x08, 0x90, 0xb8, 0x60, 0x5d, 0x2b,
	0x94, 0x54, 0x21, 0xe9, 0xbb, 0x69, 0x9a, 0xee, 0x2e, 0xca, 0x01, 0x29, 0x65, 0x79, 0x76, 0xa7,
	0x46, 0x7e, 0x83, 0xe9, 0x85, 0x22, 0x7e, 0x23, 0x3d, 0x84, 0xd6, 0x02, 0x43, 0x5c, 0xe9, 0x3d,
	0x9e, 0x85, 0x33, 0xe8, 0xe6, 0x32, 0x3b, 0x78, 0xce, 0x79, 0x0a, 0xa9, 0xc6, 0x6a, 0x6e, 0x8a,
	0x21, 0x56, 0x72, 0x5f, 0xc1, 0xb8, 0x60, 0x71, 0xd5, 0xd4, 0x5f, 0xd0, 0x1d, 0x4b, 0x89, 0x3c,
	0x98, 0xe0, 0x9a, 0xf1, 0x23, 0x70, 0x16, 0xaf, 0x53, 0x23, 0x3f, 0xa1, 0x93, 0xc3, 0x33, 0x1e,
	0x90, 0x0f, 0x79, 0xad, 0x48, 0xea, 0x79, 0xe3, 0x3f, 0x45, 0xe3, 0x3c, 0x88, 0xa2, 0x53, 0x2a,
	0x8e, 0x1c, 0xea, 0x3b, 0x58, 0xb3, 0x8d, 0x4c, 0xf8, 0xba, 0x6a, 0xb3, 0x6f, 0x60, 0x2e, 0xb4,
	0x50, 0x15, 0xd8, 0xb2, 0x95, 0xfd, 0x9f, 0xa3, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x0b,
	0xdf, 0x36, 0xad, 0x03, 0x00, 0x00,
}
